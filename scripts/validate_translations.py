#!/usr/bin/env python3
import re
from pathlib import Path
from colorama import init, Fore, Style

init(autoreset=True)

def validate_translations():
    print(Fore.CYAN + "\nüîç VALIDATING TRANSLATION SYSTEM...")
    print("=" * 60)

    test_cases = [
        {"ru": "–ö–ª–∞—Å—Å 11-–ò", "uz_expected": "11-–ò sinf", "context": "class-title"},
        {"ru": "–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: –ï–ª–µ–Ω–∞ –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞", "uz_expected": "Sinf rahbari: –ï–ª–µ–Ω–∞ –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞", "context": "class-teacher"},
        {"ru": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: 1", "uz_expected": "O'quvchilar soni: 1", "context": "student-count"},
        {"ru": "–ö–∞–±–∏–Ω–µ—Ç: 101", "uz_expected": "Xona raqami: 101", "context": "room-number"},
        {"ru": "14 –ª–µ—Ç", "uz_expected": "14 yoshda", "context": "age"},
        {"ru": "–ú—É–∂—Å–∫–æ–π", "uz_expected": "Erkak", "context": "gender"},
        {"ru": "–ñ–µ–Ω—Å–∫–∏–π", "uz_expected": "Ayol", "context": "gender"},
    ]

    patterns = [
        {"ru": r"–ö–ª–∞—Å—Å\s+([–ê-–Ø0-9\-]+)", "uz": r"\1 sinf"},
        {"ru": r"(\d+)\s*–∫–ª–∞—Å—Å", "uz": r"\1 sinf"},
        {"ru": r"–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:\s*", "uz": "Sinf rahbari: "},
        {"ru": r"–£—á–∏—Ç–µ–ª—å:\s*", "uz": "O'qituvchi: "},
        {"ru": r"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤:\s*", "uz": "O'quvchilar soni: "},
        {"ru": r"(\d+)\s*—É—á–µ–Ω–∏–∫–æ–≤", "uz": r"\1 o'quvchi"},
        {"ru": r"(\d+)\s*—É—á–µ–Ω–∏–∫", "uz": r"\1 o'quvchi"},
        {"ru": r"–ö–∞–±–∏–Ω–µ—Ç:\s*", "uz": "Xona raqami: "},
        {"ru": r"–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞:\s*", "uz": "Xona raqami: "},
        {"ru": r"(\d+)\s*–ª–µ—Ç", "uz": r"\1 yoshda"},
        {"ru": r"(\d+)\s*–≥–æ–¥–∞", "uz": r"\1 yoshda"},
        {"ru": r"–ú—É–∂—Å–∫–æ–π", "uz": "Erkak"},
        {"ru": r"–ñ–µ–Ω—Å–∫–∏–π", "uz": "Ayol"},
    ]

    passed = 0
    failed = 0

    print(Fore.YELLOW + "\nüì¶ –¢–ï–°–¢–´ –ü–ï–†–ï–í–û–î–ê:")
    print("-" * 60)

    for i, test_case in enumerate(test_cases, 1):
        ru_text = test_case["ru"]
        expected_uz = test_case["uz_expected"]

        translated = ru_text
        for pattern in patterns:
            if re.search(pattern["ru"], translated, re.IGNORECASE):
                translated = re.sub(pattern["ru"], pattern["uz"], translated, flags=re.IGNORECASE)

        if translated == expected_uz:
            print(Fore.GREEN + f"‚úÖ Test {i} PASSED")
            passed += 1
        else:
            print(Fore.RED + f"‚ùå Test {i} FAILED")
            print(f"   üîπ Input:      {ru_text}")
            print(f"   üîπ Expected:   {expected_uz}")
            print(f"   üî∏ Got:        {translated}")
            failed += 1

    print(Fore.CYAN + "\nüß© –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–ô –í JS:")
    print("-" * 60)

    js_file = Path("static/js/script.js")
    if js_file.exists():
        js_content = js_file.read_text(encoding='utf-8')
        ru_keys = re.findall(r'"([^"]+)":\s*"[^"]*"', js_content)
        ru_keys = [k for k in ru_keys if not k.startswith('uz')]

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(ru_keys)} –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π")

        critical_keys = [
            "class-teacher", "student-count", "room-number", "class-description",
            "personal-info", "contact-info", "parent-info", "full-name", "age",
            "birth-date", "gender", "student-id", "class", "phone", "email",
            "parent-name", "parent-phone", "achievements", "hobbies", "male",
            "female", "years-old", "no-photo", "no-students", "received-nominations"
        ]

        missing = [key for key in critical_keys if key not in ru_keys]
        if missing:
            print(Fore.RED + f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {missing}")
            failed += len(missing)
        else:
            print(Fore.GREEN + "‚úÖ –í—Å–µ –∫–ª—é—á–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –º–µ—Å—Ç–µ")
            passed += len(critical_keys)
    else:
        print(Fore.RED + "‚ùå JS-—Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: static/js/script.js")
        failed += 1

    print("\n" + "=" * 60)
    print(Fore.CYAN + f"üìä –ò–¢–û–ì: –£–°–ü–ï–®–ù–û: {passed}, –ù–ï–£–î–ê–ß–ù–û: {failed}")
    if failed == 0:
        print(Fore.GREEN + "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(Fore.RED + "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥—ã!")

if __name__ == "__main__":
    validate_translations()
